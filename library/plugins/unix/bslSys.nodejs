var child_process = require('child_process');
var os = require('os');
var dns = require('dns');

##opa-type list('a)
//'

/** This returns the raw arguments from the command line,
 *  it's used to seed the Opa version of ServerArgs.
 *  We also kill off ServerArgs to prevent multiple reading of the same args.
 *  We need to retain --help because it's used by the scheduler as a flag for premature exit.
 */
##register argv: -> opa[list(string)]
##args()
// function argv()
{
  var argv = process.argv, av = [];
  if (argv.length > 1) { argv.shift(); };
  for (i = 0; i < process.argv.length; i++) {
    if (process.argv[i] == "--help") av[av.length] = "--help";
  };
  process.argv = av;
  return js2list(argv);
}

##register get_argv: -> opa[list(string)]
##args()
{
    return js2list(process.argv);
}


##register self_name : -> string
##args()
{
    return process.argv[0];
}

##register exit : int -> 'a
##args(code)
//'
{
    process.exit(code);
}

##module process

##register [cps-bypass] exec_cps : string, string, continuation(string) -> void
##args(command, input, cont)
{
    var proc = child_process.exec(command,
      function (error, stdout, stderr) {
        // We ignore the standard error
        if (error == null) {
          return_(cont, stdout);
        } else {
          return_(cont, error.toString())
        }
      }
    );

    proc.stdin.write(input);
    proc.stdin.end();

    return js_void;
}

// Stub for the typechecker
##register exec : string, string -> string
##args(command, input)
{
   assert(false);
}

##endmodule

##opa-type ip
##register gethostname : -> string
##args()
{
    return os.hostname();
}

// Convert an IP address in string form to an Opa ip value.
function opa_ip_of_string(address) {
    var m = address.match(/(\d+)\.(\d+)\.(\d+)\.(\d+)/);
    var res = empty_constructor();
    add_field(res, "a", parseInt(m[1]));
    add_field(res, "b", parseInt(m[2]));
    add_field(res, "c", parseInt(m[3]));
    add_field(res, "d", parseInt(m[4]));
    return res;
}

##register [cps-bypass] gethostbyname_cps : string, continuation(option(opa[ip])) -> void
##args(address, cont)
{
    dns.lookup(address, 4,
      function (err, address, family) {
        if (err) {
          return_(cont, js_none);
        } else {
          return_(cont, js_some(opa_ip_of_string(address)));
        }
      }
    );

    return js_void;
}

// Stub for the typechecker
##register gethostbyname : string -> option(opa[ip])
##args(address)
{
    assert(false);
}

##register [cps-bypass] gethostsbyname_cps : string, continuation(opa[list(ip)]) -> void
##args(address, cont)
{
    dns.resolve(address,
      function (err, addresses) {
        if (err) {
          return_(cont, js2list([]));
        } else {
          return_(cont, js2list(addresses.map(opa_ip_of_string)));
        }
      }
    );

    return js_void;
}

// Stub for the typechecker
##register gethostsbyname : string -> opa[list(ip)]
##args(address)
{
    assert(false);
}


##register get_memory_usage : -> int
##args()
{
    return process.memoryUsage().rss;
}

##register get_env_var: string -> option(string)
##args(key)
{
  var r = process.env[key];
  return r == undefined ? js_none : js_some(r);
}
