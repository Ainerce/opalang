(*
    Copyright Â© 2011 MLstate

    This file is part of Opa.

    Opa is free software: you can redistribute it and/or modify it under the
    terms of the GNU Affero General Public License, version 3, as published by
    the Free Software Foundation.

    Opa is distributed in the hope that it will be useful, but WITHOUT ANY
    WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
    FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for
    more details.

    You should have received a copy of the GNU Affero General Public License
    along with Opa. If not, see <http://www.gnu.org/licenses/>.
*)
##
## @author Valentin Gatien-Baron
##


{{ open Parser_utils
   open SurfaceAst
 }}

spacing <- Xml.spacing;
lbrace   <- Opa_lexer.lbrace  $
rbrace   <- Opa_lexer.rbrace  $

let deco rule = (=Opa_lexer.deco(rule));
let careful_deco rule = (=Opa_lexer.careful_deco(rule));
let exact_ident rule = (=Opa_parser.exact_ident(rule));

/** xml parser **/
xml_parser <-
  / (=Opa_lexer.exact_ident("xml_parser")) lbrace spacing xml_parser_no_keyword:v rbrace
    {{ v }}

;deco_xml_parser_no_keyword = deco xml_parser_no_keyword;
xml_parser_no_keyword <-
  / (Opa_parser.match_case xml_rule:v {{v}})+:l
    (Opa_parser.match_default_case Opa_parser.match_prod:e {{e}})?:d
    {{ (xml_parser ((l, d) : _ xml_parser) : (_,_) expr_node) }}

trx_parser <- Opa_lexer.PARSER? Trx.Item+:l (*Trx.ParserSeq:e*) {{ l }}

/** xml parser rule **/
xml_rule <- spacing xml_named_pattern+:pl Opa_parser.match_prod:e {{ ((pl,e) : _ xml_rule) }}

ident_except_parser <- !("parser" Opa_lexer.end_of_ident_nosp) Opa_lexer.ml_identifier:i {{ i }}

/* xml named pattern */
xml_named_pattern <- spacing ident_except_parser:i xml_suffix?:o spacing !Opa_lexer.assign {{ ((Some i, XmlAny, o) : _ xml_named_pattern) }}
                   / (=mk_xml_named_pattern_aux(name_binding, xml_named_pattern))

;xml_named_pattern_no_binding <- (=mk_xml_named_pattern_aux(no_binding, xml_named_pattern_no_binding))
;let mk_xml_named_pattern_aux binding content_pattern = spacing binding:i (=mk_xml_pattern(binding, content_pattern)):p xml_suffix?:o spacing {{ ((i, p, o) : _ xml_named_pattern) }}
                   / Trx.AND (=mk_xml_named_pattern_list(content_pattern)):l {{ (None, XmlPrefixed (XmlAnd, l), None) }}
                   / Trx.NOT (=mk_xml_named_pattern_list(xml_named_pattern_no_binding)):l {{ (None, XmlPrefixed (XmlNot, l), None) }}
                   / spacing trx_parser:e spacing {{ (None, XmlParser e, None) }}

/* xml unnamed pattern */
let mk_xml_named_pattern_list content_pattern = Opa_lexer.lpar_nosp spacing content_pattern+:l Opa_lexer.rpar spacing {{ l }}
                           / content_pattern:p {{ [p] }}

;name_binding <- (ident_except_parser:i Opa_lexer.assign spacing {{ i }})?:io {{ io }}
;no_binding <- &. {{ None }}

/** xml parser pattern **/
let mk_xml_pattern binding content_pattern = Xml.open_sign (=mk_xml_nstag_pattern(binding)):nstag attribute*:l
                ( Xml.close_sign spacing content_pattern*:l
                  Xml.close_tag_or_frag:close_tag {{ (l, close_tag) }}
                / Xml.autoclose {{ ([],None) }}):p {{
                    let rev_bindings, rev_l = List.fold_left
                      (fun (rev_bindings,rev_l) -> function
                       | `define (bnd:(string * (_,_) expr)) -> (bnd :: rev_bindings, rev_l)
                       | `normal_attr v -> (rev_bindings, v :: rev_l)
                      ) ([],[]) l in
                    let (children, end_tago) = p in
                    let (nsb, nspl), ((_, tagpl) as tag) = nstag in
                    begin match nspl, tagpl, end_tago with
                    | [XmlNameConst ns], [XmlNameConst beg_tag], Some end_tag -> tag_mismatch (ns, beg_tag) end_tag
                    | _, _, Some end_tag -> pattern_tag_mismatch end_tag
                    | _ -> () end;
                    let nspl = List.map (function
                    | XmlNameConst (string, label) -> XmlNameStringExpr (SA.Ident ("xmlns:"^string), label)
                    | nsp -> nsp) nspl in
                    let node = XmlNode ({namespace = (nsb, nspl); name = tag}, rev_l, children) in
                    if rev_bindings = [] then node
                    else SA.XmlLetIn (rev_bindings, node)
                }}
             / "_" Opa_lexer.end_of_ident_nosp  {{ XmlAny }}
             / Opa_parser.opa_in_braces_nosp:e {{ XmlExpr e }}
             / Opa_lexer.lpar deco_xml_parser_no_keyword:e Opa_lexer.rpar {{ XmlExpr e }}

;let mk_xml_nstag_pattern binding = (=deco((=mk_xml_named_tagname_pattern(binding)))):n1 spacing ([:] spacing (=mk_xml_named_tagname_pattern(binding)):n spacing {{ n }})?:n2 {{
  let ns, t = match n1, n2 with
  | (t, label), None -> (None, [XmlNameConst ("", label)]), t
  | (ns, _), Some t -> ns, t in
  begin match t with
  | _, [XmlNameConst t] -> push_tag t
  | _ -> () end;
  ns, t
}}

;let mk_xml_named_tagname_pattern binding = binding:io ("_" Opa_lexer.end_of_ident_nosp {{ [] }} / (=Opa_parser.list1(xml_tagname_pattern_w_spacing, Opa_parser.match_sep))):l {{ io, l }}
;xml_tagname_pattern_w_spacing <- spacing xml_tagname_pattern:p spacing {{ p }}
;xml_tagname_pattern <- Xml.deco_tname:n {{ XmlNameConst n }}
                      / Opa_parser.opa_in_braces_nosp:e {{ XmlNameParserExpr e }}
                      / Opa_lexer.lpar spacing trx_parser:e spacing Opa_lexer.rpar {{ XmlNameParser e }}
                      / String_expr.string_with_opa:e {{ XmlNameStringParser e }}

attribute_lhs <- Xml.namespace:ns Xml.deco_ename:name spacing
                   {{ match ns, name with
                      | ("xmlns",_), (name,label) ->
                          `define ("xmlns:"^name, label)
                      | ("",_), ("xmlns",label) ->
                          `define ("xmlns:", label)
                      | _ ->
                          let ns =
                            let string, label = ns in
                            (SA.Ident ("xmlns:"^string), label) in
                          `normal_attr {namespace = ns; name = name} }}
attribute_value <- ( String_expr.string_with_opa:e {{ XmlAttrStringParser e }}
                   / Opa_parser.opa_in_braces:e {{ XmlAttrParser e }}
                   / Opa_lexer.underscore {{ XmlExists }}
                   ):e {{ e }}
attribute_rhs <- Opa_lexer.assign spacing
                   ( attribute_value:e {{ e, None }}
                   / Opa_lexer.lpar attribute_value:e Opa_lexer.AS Opa_lexer.ml_identifier:i Opa_lexer.rpar {{ e, Some i}} ):v
                 {{ v }}
               / !Opa_lexer.assign {{ XmlName, None }}

/* xml parser attribute value */
attribute <- spacing attribute_lhs:name attribute_rhs:e {{
               match name with
               | `define (name, label) -> (
                   let e =
                     match e with
                     | _, Some _ -> error1 (Printf.sprintf "You cannot put a 'as' on an xmlns declaration.") label
                     | XmlExists, None -> error1 (Printf.sprintf "'_' is not an expression.") label
                     | XmlAttrParser e, None
                     | XmlAttrStringParser e, None -> e
                     | XmlName, None -> (SA.Ident name, label) in
                   `define ((name,e):(string * (string,_) expr))
                 )
               | `normal_attr name -> `normal_attr (name, snd e, fst e)
             }}

;xml_suffix = deco just_xml_suffix;
just_xml_suffix <- "?" {{ Xml_question }}
            / "+" {{ Xml_plus }}
            / "*" {{ Xml_star }}
            / Opa_parser.lbrace Opa_parser.expr:e1
              (Opa_parser.comma Opa_parser.expr:e2 {{e2}})?:oe2 Opa_parser.rbrace
             {{ match oe2 with None -> Xml_number e1 | Some e2 -> Xml_range (e1,e2) }}
