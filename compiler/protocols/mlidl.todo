-*-outline-*-

* Name output module

let module_name = "myprotocol"
let bsl_prefix = "plugin"

** Implemented.

* External types

extern typ : My.type = "[(key,handler);...]"

** Implemented for all phases.

* Handle cons tuples

type Dog of int * string

** Implemented but a *real* hack.

*** TODO: tidy this up.

* Backwards compatibility for versions

???

* Error handling

Currently just segfaults on parser fail.

* Debugging

MLSTATE_IDL_DEBUG !!!

* Update hlnet wrappers

direct send receive after server init.

let init_server = ("0.0.0.0",12345,...)???
val send_cat : cat
val receive_dog : dog
val send_receive_profile : profile -> profile

** Implemented as responders

val responder_type : type1 -> type2

Works with ML and BSL but not OPA.

* Put support code in external libraries

idlMLRuntime.ml
idlBSLRuntime.ml
idlOPARuntime.opa

* Optimisation

fold_record vs. dot.
profile native OPA vs BSL.
convert to text module in OPA.
make input functional.
convert ServerLib to runtime code.

* Tidy up and document

Remove redundant code (quite a lot).
User manual.
