(*
    Copyright Â© 2011 MLstate

    This file is part of OPA.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*)
%%memoization=none

types:{{

open Requestdef

(* TODO: check the grammar with RFC: http://tools.ietf.org/html/rfc2616 *)

(* FIXME: request option ? *)
type parse_request =
  | Complete of request
  | Incomplete

}}

+request : {parse_request} <-
        / RequestLineShort {{ Complete { request_line = __1 ; request_header = RequestHeader.empty ; request_message_body = "" ; server_info = None} }}
        / RequestLine headers {{ Complete { request_line = __1 ; request_header = __2 ; request_message_body = "" ; server_info = None} }}
        / RequestLine {{ Incomplete }}

+response : {Requestdef.Value.value Requestdef.RequestHeader.t} <-
        / ResponseLine headers {{ __2 }}
RequestLine <- Word Space+ Word Space+ Word EOL
        {{  { _method = method_of_string __1 ; request_uri = __3 ; http_version = __5 } }}

# We need to accept HTTP/0.9 requests.
RequestLineShort <- Word Space+ Word EOL
        {{ { _method = method_of_string __1 ; request_uri = __3 ; http_version = "HTTP/0.9" } }}

ResponseLine <- Word Space+ ([0-9]+ $_) (Space+ Word)+ EOL
        {{  __1, int_of_string(__3) }}


headers <- Header headers {{ let k, v = __1 in try RequestHeader.add (request_header_of_string k) v __2 with (Parsing _) -> __2 }}
        / EOL {{ RequestHeader.empty }}

Header <- Word [:] Space* field_value EOL {{ __1, __4 }}

field_value <-
        #Values {{ __1 }} /
        (!EOL . {{ __2 }})* {{ `string (Tgrammar.string_of_chars __1) }}

# FIXME: faux... la virgule peut être dans un " " ou ( ) ??? par exemple
Values <- Value ([,] Value {{__2}})+ {{ `value (__1 :: __2) }}
Value <- (![;,\r\n] . {{ __2 }})+ ([;] Space* (![,\r\n] . {{__2 }})+ {{ Tgrammar.string_of_chars __3 }})? {{ Tgrammar.string_of_chars __1, __2 }}

Word <- Char+ {{ Tgrammar.string_of_chars __1 }}
Char <- !(FullSpace $ / [:] $) . {{ __2 }}

Space <- ' ' / '\t'
FullSpace <- Space / EOL
EOL <- '\r\n' / '\n' / '\r'
# EOF <- !.
