var ldap = require('ldapjs')

/**
 * @side{server}
 * @opaType Ldap.options
 * @externType Ldap.ldap
 * @opaType Ldap.search_options
 * @opaType Ldap.search_result
 * @opaType outcome('a, 'b)
 */

/**
 * @register {opa[Ldap.options] -> outcome(Ldap.ldap,string)}
 */
  function createLdap(options) {
    try {
      return {success:ldap.createClient(options)};
    } catch (e) {
      return {failure:e.message};
    }
  }

/**
 * @register {Ldap.ldap, string, string, continuation(outcome(void,string)) -> void}
 */
  function bindLdap(client, dn, password, callback) {
    client.bind(dn, password, errCb(callback));
  }

/**
 * @register {Ldap.ldap, string, opa[Ldap.search_options], continuation(opa[Ldap.search_result]) -> void}
 */
  function searchLdap(client, base, options, callback) {
    if (!options.scope) options.scope = 'base';
    if (options.scope != 'base' && options.scope != 'one' && options.scope != 'sub')
      return_(callback, {error:'Bad search options scope '+options.scope});
    opts = {scope:options.scope};
    if (options.filter) opts.filter = options.filter;
    if (options.attributes) opts.attributes = list2js(options.attributes);
    if (options.attrsOnly) opts.attrsOnly = options.attrsOnly;
    if (options.sizeLimit) opts.sizeLimit = options.sizeLimit;
    if (options.timeLimit) opts.timeLimit = options.timeLimit;
    //console.log("typeof(opts.attributes)="+typeof(opts.attributes));
    //console.log("opts: "+opts);
    //for (fld in opts) { console.log(fld+": "+opts[fld]); }
    //for (fld in opts.attributes) { console.log(fld+": "+opts.attributes[fld]); }
    client.search(base, opts,
                  function(error, search) {
                    if (search) {
                      search.on('searchEntry',
                                function(entry) {
                                  if (entry.object) {
                                    //for (fld in entry.object) { console.log(fld+": "+entry.object[fld]); }
                                    return_(callback, {entry:JSON.stringify(entry.object)});
                                  }
                                });
                      search.on('searchReference', function(referral) {
                                  if (referral.uris) {
                                    //console.log('referral: ' + referral.uris.join());
                                    return_(callback,{referral:referral.uris});
                                  }
                                });
                      search.on('error', function(error) {
                                  //console.error('error: '+error.message);
                                  return_(callback,{error:error.message});
                                });
                      search.on('end', function(result) {
                                  //console.log('status: '+result.status);
                                  return_(callback,{status:result.status});
                                });
                    };
                  });
    return;
  }

  function errCb(callback) {
    return function (error) {
      if (error) {
        //console.log(error.message);
        return_(callback,{failure:error.message});
      } else {
        return_(callback,{success:{}});
      }
    }
  }

/**
 * @register {Ldap.ldap, string, string, continuation(outcome(void,string)) -> void}
 */
  function addLdap(client, dn, entry, callback) {
    client.add(dn, JSON.parse(entry), errCb(callback));
  }

/**
 * @register {Ldap.ldap, string, continuation(outcome(void,string)) -> void}
 */
  function delLdap(client, dn, callback) {
    client.del(dn, errCb(callback));
  }

/**
 * @register {Ldap.ldap, string, string, continuation(outcome(tuple_2(string,string),string)) -> void}
 */
  function exopLdap(client, name, value, callback) {
    client.exop(name, JSON.parse(value),
                function (error, value, res) {
                  if (error) {
                    //console.log(error.message);
                    return_(callback,{failure:error.message});
                  } else {
                    return_(callback,{success:{f1:JSON.stringify(value), f2:JSON.stringify(res)}});
                  }
                })
  }

/**
 * @register {Ldap.ldap, string, string, continuation(outcome(void,string)) -> void}
 */
  function modifyLdap(client, dn, change, callback) {
    client.modify(dn, new ldap.Change(JSON.parse(change)), errCb(callback));
  }

/**
 * @register {Ldap.ldap, string, string, continuation(outcome(void,string)) -> void}
 */
  function modifyDNLdap(client, dn, newDN, callback) {
    client.modifyDN(dn, newDN, errCb(callback));
  }

/**
 * @register {Ldap.ldap, continuation(outcome(void,string)) -> void}
 */
  function unbindLdap(client, callback) {
    client.unbind(errCb(callback));
  }



