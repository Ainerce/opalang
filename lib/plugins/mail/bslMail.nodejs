var nodemailer = require("nodemailer");
var simplesmtp = require("simplesmtp");
var fs = require("fs");
var imap = require("imap");

var debug = true

##extern-type continuation('a)
##extern-type caml_list('a)
##extern-type caml_tuple_2('a,'b)
##extern-type caml_tuple_4('a,'b,'c,'d)
##extern-type SSL.secure_type

##opa-type list('a)
##opa-type tuple_2('a, 'b)
//'

##module SmtpClient

  ##opa-type Email.send_status

  ##register [cps-bypass] mail_send_fun : \
    string, string, \
    caml_list(string), \
    string, string, string, \
    string, string, string, \
    caml_list(caml_tuple_4(string,string,string,string)), \
    caml_list(caml_tuple_2(string,string)), \
    option(string), option(string), option(int), option(string), option(string), option(string), opa[bool], option(SSL.secure_type), \
    (opa[email_send_status], continuation(opa[void]) -> void), \
    continuation(opa[void]) -> void
##args(mfrom,mfrom_address_only,mdst,mto,mcc,mbcc,subject,mdata,html,files,custom_headers,via,addr,port,auth,user,pass,dryrun,secure_type,callback,k)
  {

      var attachments = files.map(function(file) {
	  return {
	      fileName: file.f1,
	      contents: file.f4,
	      contentType: file.f2
	  }
      });

      var headers = empty_constructor();
      custom_headers.forEach(function(header) {
	  if (header.f1 != "size")
      	      add_field(headers, header.f1, header.f2);
      })

      var mailOptions = {
	  from: mfrom, // sender address
	  to: mto, // list of receivers
	  cc: mcc,
	  bcc: mbcc,
	  subject: subject, // Subject line
	  text: mdata, // plaintext body
	  html: html, // html body
	  headers: headers,
	  attachments: attachments
      };

      var smtpTransport;
      if (addr.none) {
	  // Create a Sendmail transport object
	  smtpTransport = nodemailer.createTransport("Sendmail", {
	      args: ["-f "+mfrom_address_only]
	  });
      } else {
	  var addr = option2default(via, addr.some)
	  var port = option2default(port, 25)
	  var secure = !(secure_type.none);
	  var user = option2default(user, "");
	  var pass = option2default(pass, "")
	  smtpTransport = nodemailer.createTransport("SMTP", {
	      host: addr,
	      port: port,
	      secureConnection: secure,
	      debug: debug,
	      auth: {
		  user:user,
		  pass:pass
	      }
	  });
      }

      if (dryrun) {
	  if (smtpTransport) callback({ok:""}, k.ccont(function(){}))
	  else callback({error:""}, k.ccont(function(){}))
      } else {
	  // send mail with defined transport object
	  smtpTransport.sendMail(mailOptions, function(error, response){
	      if (error) {
		  console.log(error);
		  callback({error:error}, k.ccont(function(){}))
	      } else {
		  console.log("Message sent: " + response.message);
		  callback({ok:""}, k.ccont(function(){}))
	      }
	      smtpTransport.close();
	  });
      }

      return_(k, js_void);
      return;

  } // End register


##endmodule


##module ImapClient

  ##opa-type Email.imap_command
  ##opa-type Email.imap_result
  ##opa-type Email.imap_status

  ##register [cps-bypass] command : \
    int, string, option(SSL.secure_type), \
    string, string, opa[list(email_imap_command)], \
    (opa[list(email_imap_result)], continuation(opa[void]) -> void), \
    continuation(opa[void]) -> void
  ##args(port,addr,secure_type,username,password,commands,cont,k)
  {

      // TODO
      // var ImapConnection = imap.ImapConnection;
      // var secure = !(secure_type.none);
      // var res = [];

      // imap = new ImapConnection({
      // 	  username: username,
      // 	  password: password,
      // 	  host: addr,
      // 	  port: port,
      // 	  secure: secure
      // });

      // var box, cmds, next = 0, cb = function(err) {
      // 	  if (err) {
      // 	      res.push({Error:err})
      // 	  } else if (next < cmds.length) {
      // 	      res.push(cmds[next++].apply(this, Array.prototype.slice.call(arguments).slice(1)));
      // 	  }
      // };

      // cmds = [
      // 	  function() { imap.connect(cb); },
      // 	  function() { imap.openBox('INBOX', false, cb); },
      // 	  function(result) { box = result; imap.search([ 'UNSEEN', ['SINCE', 'May 20, 2010'] ], cb); },
      // 	  function(results) {
      // 	      var fetch = imap.fetch(results, { request: { headers: ['from', 'to', 'subject', 'date'] } });
      // 	      fetch.on('message', function(msg) {
      // 		  console.log('Got message: ' + util.inspect(msg, false, 5));
      // 		  msg.on('data', function(chunk) {
      // 		      console.log('Got message chunk of size ' + chunk.length);
      // 		  });
      // 		  msg.on('end', function() {
      // 		      console.log('Finished message: ' + util.inspect(msg, false, 5));
      // 		  });
      // 	      });
      // 	      fetch.on('end', function() {
      // 		  console.log('Done fetching all messages!');
      // 		  imap.logout(cb);
      // 	      });
      // 	  }
      // ];

      // cont(res, k.ccont(function(){}));

      return_(k, js_void);
      return;
  }

##endmodule


##module SmtpServer

  ##register [cps-bypass] init_server : \
    int, string, option(SSL.secure_type), \
    (opa[string], opa[list(string)], opa[string], continuation(opa[tuple_2(int, string)]) -> void), \
    continuation(opa[void]) -> void
  ##args(port,addr,secure_type,handler,k)
  {

      var secure = !(secure_type.none);

      var smtp = simplesmtp.createServer({
	  debug: debug,
	  requireAuthentication: false,
	  enableAuthentication: false,
	  secureConnection: secure
      });
      smtp.listen(port);

      smtp.on("startData", function(envelope){
	  if (debug) {
	      console.log("Message from:", envelope.from);
	      console.log("Message to:", envelope.to);
	  };
	  envelope.data = "";
      });

      smtp.on("data", function(envelope, chunk){
	  envelope.data += chunk;
      });

      smtp.on("dataReady", function(envelope, callback){
	  //console.log(envelope.data);
	  handler(envelope.from, js2list(envelope.to), envelope.data,
		  k.ccont(function(res){
		      if (res.f1 == 250) {
	      		  var queue_id = Date.now();
	      		  callback(null, queue_id); // ABC1 is the queue id to be advertised to the client
		      } else {
	      		  callback(new Error(res.f2));
		      };
		  }),
		  k.ccont(function(){}));
      });

      return_(k, js_void);
      return;
  }

##endmodule

