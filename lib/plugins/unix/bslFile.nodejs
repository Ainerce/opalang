var FileSystem = require('fs');

/** TODO - plugins dependencies */
/** @property mli */
/** @externType time_t */
/** @externType continuation('a) */
/** @externType binary */
/** *****************************/

/**
 * @register {string -> bool}
 */
function exists(path) {
  try{
    FileSystem.statSync(path);
    return true;
  } catch(e) {
    return false;
  };
}

/**
 * @register {string -> bool}
 */
function is_regular(path) {
  try{
    return FileSystem.statSync(path).isFile();
  } catch(e) {
    return false;
  };
}

/**
 * @register {string -> bool}
 */
function is_directory(path) {
  try{
    return FileSystem.statSync(path).isDirectory();
  } catch(e) {
    return false;
  };
}

/**
 * @register {string -> bool}
 */
function make_dir(path) {
  try{
    return FileSystem.mkdirSync(path);
    return true;
  } catch(e) {
    return false;
  };
}

/**
 * @register {string -> string}
 */
function basename(path) {
  return path.split("/").pop();
}

/**
 * @register {string -> string}
 */
function dirname(path) {
  var r = path.split("/");
  r.pop();
  return r.join("/");
}

/**
 * @register {string -> option(binary)}
 */
function content_op(path) {
  try{
    return js_some(binary_of_buffer(FileSystem.readFileSync(path)));
  }catch(e){
    return js_none;
  }
}

/**
 * @register {string -> void}
 */
function create_full_path(path) {
  var   p = path.split( "/"), path = [ ];
  while (p.length >  0) {
    try {
      path.push(p.shift());
      FileSystem.mkdirSync( path.join( "/"));
    } catch (e) {
      if (e.code !=  "EEXIST") {
        throw e;
      }

    }
  }
  return js_void;
}

/**
 * @register {string, string, bool -> void}
 */
function move(src, dst, _force) {
  FileSystem.renameSync(src, dst);
  return js_void;
}

/**
 * @register {string -> binary}
 */
function content(path) {
  return binary_of_buffer(FileSystem.readFileSync(path));
}

/**
 * @register {string -> time_t}
 */
function last_modification(path) {
  return FileSystem.statSync(path).mtime;
}

// WARNING : Binary is not trimed
/**
 * @register {string, binary -> void}
 */
function of_string(path, bin) {
  var dir = dirname(path);
  create_full_path(dir);
  FileSystem.writeFileSync(path, bin.contents);
  return js_void;
}

/**
 * @register {void -> string}
 */
function mlstate_dir(_) {
  var home = process.env["HOME"];
  var mlstate_dir = home+"/.opa";
  make_dir(mlstate_dir);
  return mlstate_dir;
}
