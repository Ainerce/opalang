/*
    Copyright Â© 2011, 2012 MLstate

    This file is part of Opa.

    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
var FileSystem = require('fs');

/** TODO - plugins dependencies */
/** @externType time_t */
/** @externType continuation('a) */
/** @externType binary */

/** @externType llarray('a) */
/** @externType tuple_2('a, 'b) */

/** *****************************/

/**
 * @register {string -> bool}
 */
function exists(path) {
  try{
    FileSystem.statSync(path);
    return true;
  } catch(e) {
    return false;
  };
}

/**
 * @register {string -> bool}
 */
function is_regular(path) {
  try{
    return FileSystem.statSync(path).isFile();
  } catch(e) {
    return false;
  };
}

/**
 * @register {string -> bool}
 */
function is_directory(path) {
  try{
    return FileSystem.statSync(path).isDirectory();
  } catch(e) {
    return false;
  };
}

/**
 * @register {string -> bool}
 */
function make_dir(path) {
  try{
    FileSystem.mkdirSync(path);
    return true;
  } catch(e) {
    return false;
  };
}

/**
 * @register {string -> string}
 */
function basename(path) {
  return path.split("/").pop();
}

/**
 * @register {string -> string}
 */
function dirname(path) {
  var r = path.split("/");
  r.pop();
  return r.join("/");
}

/**
 * @register {string -> opa[option(binary)]}
 */
function content_opt(path) {
  try{
    return js_some(binary_of_buffer(FileSystem.readFileSync(path)));
  }catch(e){
    return js_none;
  }
}

/**
 * @register {string -> void}
 */
function create_full_path(path) {
  var   p = path.split( "/"), path = [ ];
  while (p.length >  0) {
    try {
      path.push(p.shift());
      FileSystem.mkdirSync( path.join( "/"));
    } catch (e) {
      if (e.code !=  "EEXIST") {
        throw e;
      }

    }
  }
  return js_void;
}

/**
 * @register {string, string, bool -> void}
 */
function move(src, dst, _force) {
  FileSystem.renameSync(src, dst);
  return js_void;
}

/**
 * @register {string -> binary}
 */
function content(path) {
  return binary_of_buffer(FileSystem.readFileSync(path));
}

/**
 * @register {string -> time_t}
 */
function last_modification(path) {
  return FileSystem.statSync(path).mtime;
}

// WARNING : Binary is not trimed
/**
 * @register {string, binary -> void}
 */
function of_string(path, bin) {
  var dir = dirname(path);
  create_full_path(dir);
  FileSystem.writeFileSync(path, bin.contents);
  return js_void;
}

/**
 * @register {void -> string}
 */
function mlstate_dir(_) {
  var home = process.env["HOME"];
  var mlstate_dir = home+"/.opa";
  make_dir(mlstate_dir);
  return mlstate_dir;
}


/** @register { string, continuation(tuple_2(string,llarray(string))) -> void }
  * @cpsBypass
  */
function readdir(path,cont1)
{
    function cont2(err,l){
             err = err?""+err:""
             return_(cont1,{f1:err, f2:l})
    }
    fs.readdir(path, cont2)
}

