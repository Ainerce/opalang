var FileSystem = require('fs');

/** TODO - plugins dependencies */
##property[mli]
##extern-type time_t
##extern-type continuation('a)
##extern-type binary
/** *****************************/

##register exists : string -> bool
##args(path)
{
  try{
    FileSystem.statSync(path);
    return true;
  } catch(e) {
    return false
  };
}

##register is_regular : string -> bool
##args(path)
{
  try{
    return FileSystem.statSync(path).isFile();
  } catch(e) {
    return false
  };
}

##register is_directory : string -> bool
##args(path)
{
  try{
    return FileSystem.statSync(path).isDirectory();
  } catch(e) {
    return false
  };
}

##register make_dir : string -> bool
##args(path)
{
  try{
    return FileSystem.mkdirSync(path);
    return true;
  } catch(e) {
    return false
  };
}

##register basename : string -> string
##args(path)
{
  return path.split("/").pop();
}

##register dirname : string -> string
##args(path)
{
  var r = path.split("/");
  r.pop();
  return r.join("/");
}

##register content_opt: string -> option(binary)
##args(path)
{
  try{
    return js_some(binary_of_buffer(FileSystem.readFileSync(path)));
  }catch(e){
    return js_none;
  }
}

##register create_full_path:string -> void
##args(path)
{
  var   p = path.split( "/"), path = [ ];
  while (p.length >  0) {
    try {
      path.push(p.shift())
      FileSystem.mkdirSync( path.join( "/"));
    } catch (e) {
      if (e.code !=  "EEXIST") {
        throw e;
      }

    }
  }
  return js_void;
}

##register move: string, string, bool -> void
##args(src, dst, _force)
{
  FileSystem.renameSync(src, dst);
  return js_void;
}

##register content: string -> binary
##args(path)
{
  return binary_of_buffer(FileSystem.readFileSync(path));
}

##register last_modification : string -> time_t
##args(path)
{
  return FileSystem.statSync(path).mtime;
}

// WARNING : Binary is not trimed
##register of_string : string, binary -> void
##args(path, bin)
{
  var dir = %%BslFile.dirname%%(path);
  %%BslFile.create_full_path%%(dir);
  FileSystem.writeFileSync(path, bin.contents);
  return js_void;
}

##register mlstate_dir : void -> string
##args(_)
{
  var home = process.env["HOME"];
  var mlstate_dir = home+"/.opa";
  %%BslFile.make_dir%%(mlstate_dir);
  return mlstate_dir;
}
