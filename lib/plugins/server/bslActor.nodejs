/** @externType Actor.t('ctx, 'msg) */

/** @register {'state, \
               ('state, 'msg, option('ctx) -> option('state)), \
               option(-> void), \
               option('ctx), \
               bool \
               -> Actor.t('ctx, 'msg)}
 * Prototype for the type checker.
 */
function make(state, handler, ondelete, ctx, concurrent) {
  return new LocalChannel(state, null, h, ctx, d, null, concurrent);
}

/**
 * @register {'state, \
              ('state, 'msg, option('ctx), \
                 continuation(opa[option('state)]) -> void), \
              option(continuation(opa[void]) -> void), \
              option('ctx), \
              bool, \
              continuation(Actor.t('ctx, 'msg)) -> void}
 * @cpsBypass
 */
function make_cps(state, handler, ondelete, ctx, concurrent, k) {
  var h = function(st, msg, ctx, fk){ handler(st, msg, ctx, cont(fk)) };
  var d = option2js(ondelete);
  // FIXME: There's one argument missing here
  d = d ? opa_cps_callback_to_js_callback0(d) : null;
  var a = new LocalChannel(state, null, h, ctx, d, null, concurrent);
  return_(k, a);
}

/**
 * @register {option('ctx), 'msg , Actor.t('ctx, 'msg) -> void}
 */
function post(ctx, msg, actor) {
  actor.send(null, msg, ctx);
  return js_void;
}
