/*
    Copyright Â© 2011 MLstate

    This file is part of Opa.

    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
var Crypto = require('crypto');

/**
 * Compute the MD5 signature of a string.
 *
 * @param {!string} str A text of arbitrary length.
 * @return {!string} A 32 digits long hexadecimal string
 */
##register md5 : string -> string
##args(data)
{
    var hash = Crypto.createHash('md5');
    hash.update(data);
    return hash.digest('hex');
}

/**
 * Encode a string as Base 64
 *
 * @param {!string} str A text of arbitrary length.
 * @return {!string} A (longer) representation, encoded as base 64
 */
##register base64_encode : string -> string
##args(data)
{
    // Warning: As of version 0.6.9, the node.js docs say that
    // using the 'binary' encoding is deprecated and will
    // be removed in future versions of node.x

    return new Buffer(data, 'binary').toString('base64');
}

/**
 * @param {!string} str A base64-encoded text
 * @return {!string} A decoded representation
 */
##register base64_decode : string -> string
##args(data)
{
    return new Buffer(data, 'base64');
}

/**
 * Compute the SHA1 signature of a string
 *
 * @param {!string} salt
 * @param {!string} str The message to be hashed.
 * @return {!string} The resulting signature
 */
##register hmac_sha1 : string, string -> string
##args(salt, str)
{
  // See the 'binary' warning in base64_encode()
  return Crypto.createHmac('sha1', salt).update(str).digest('binary');
}

##register base64_encode_compact : string -> string
##args(str)
{
  // compact just means no lines and no padding
  var data = new Buffer(data, 'binary').toString('base64');
  return data.substr(0,Math.ceil((str.length * 4) / 3));
}

##register base64_encode_multiline : string -> string
##args(str)
//function base64_encode_multiline(str)
{
  // This faithfully follows the strange pattern of carriage returns
  // generated by Cryptokit.
  var width = 72;
  var data = new Buffer(str, 'binary').toString('base64');
  if (data.length < 4) return data;
  if (data.length < width) return data^'\n';
  var strs = [];
  for (var i = 0; i < data.length; ) {
    var l = (data.length - i > width) ? width : data.length - i;
    var ss = data.substr(i, l);
    if (l > 4 || (data[i+l-1] != '=')) ss += '\n';
    strs.push(ss);
    i += l;
  }
  return strs.join("");
}

##register base64_decode2 : string -> string
##args(str)
{
  // I've no idea what the difference is between decode and decode2
  // One uses Caml code in libbase, the other uses Cryptokit.
  return new Buffer(data, 'base64');
}

##register hmac_sha256 : string, string -> string
##args(salt, str)
//function hmac_sha256(salt, str)
{
  return Crypto.createHmac('sha256', salt).update(str).digest('binary');
}

##register hmac : string, string, string, string -> string
##args(algo, encoding, salt, str)
//function hmac(algo, encoding, salt, str)
{
  return Crypto.createHmac(algo, salt).update(str).digest(encoding);
}

##register sha2 : string -> string
##args(str)
//function sha2(str)
{
  var hash = Crypto.createHash('sha256');
  hash.update(str);
  return hash.digest('binary');
}

##register hash : string, string, string -> string
##args(algo, format, str)
//function hash(algo, format, str)
{
  var hash = Crypto.createHash(algo);
  hash.update(str);
  return hash.digest(format);
}
