var mongo = require('mongodb')
var Admin = mongo.Admin;
var BSON = mongo.BSONPure;
var CheckMaster = mongo.CheckMaster;
var Connection = mongo.Connection;
var Cursor = mongo.Cursor;
var Db = mongo.Db;
var DbCommand = mongo.DbCommand;
var GridStore = mongo.GridStore;
var ReplSetServers = mongo.ReplSetServers;
var Server = mongo.Server;
var connect = mongo.connect;

/** @externType NodeMongo.server */
/** @externType NodeMongo.db */
/** @externType NodeMongo.collection */
/** @externType NodeBson.document */
/** @externType NodeBson.value */
/** @externType Mongo.reply */
/** @externType binary */
/** @opaType Bson.document */
/** @opaType Bson.value */

/** @externType int32 */
/** @externType int64 */
/** @opaType tuple_2('a, 'b) */
/** @externType continuation('a) */
/** @opaType list('a) */

/** @module NodeBson */

  /**
   * @register { -> NodeBson.document}
   */
  function empty_document() {
    return {};
  }

  /**
   * @register { -> NodeBson.document}
   */
  function empty_array() {
    return [];
  }

  /**
   * @register {NodeBson.document, string, NodeBson.value -> void}
   */
  function add_element(doc, name, elt) {
    doc[name] = elt;
    return js_void;
  }

  /**
   * @register {float -> NodeBson.value}
   */
  function float_value(f) {
    return new mongo.Double(f);
  }

  /**
   * @register {int -> NodeBson.value}
   */
  function int_value(i) {
    return i;
  }

  /**
   * @register {string -> NodeBson.value}
   */
  function string_value(s) {
    return s;
  }

  /**
   * @register {bool -> NodeBson.value}
   */
  function bool_value(b) {
    return un_uniformize_bool(b);
  }

  /**
   * @register {int32 -> NodeBson.value}
   */
  function int32_value(i) {
    return i;
  }

  /**
   * @register {int, int -> NodeBson.value}
   */
  function timestamp_value(l, h) {
    return mongo.Timestamp(l, h);
  }

  /**
   * @register {int64 -> NodeBson.value}
   */
  function int64_value(i) {
    return mongo.Long(i[0], i[1]);
  }

  /**
   * @register {NodeBson.document -> NodeBson.value}
   */
  function document_value(d) {
    return d;
  }

  /**
   * @register {NodeBson.document -> NodeBson.value}
   */
  function array_value(a) {
    return a;
  }

  /**
   * @register {binary -> NodeBson.value}
   */
  function binary_value(b) {
    return new mongo.Binary(b.contents);
  }

  /**
   * @register {string -> NodeBson.value}
   */
  function object_id_value(s) {
    return new mongo.ObjectID(s);
  }

  /**
   * @register {int -> NodeBson.value}
   */
  function date_value(d) {
    return new Date(d);
  }

  /**
   * @register {-> NodeBson.value}
   */
  function null_value() {
    return null;
  }

  /**
   * @register {string, string -> NodeBson.value}
   */
  function regexp_value(p, f) {
    return new RegExp(p, f);
  }

  /**
   * @register {string -> NodeBson.value}
   */
  function code_value(c) {
    return new mongo.Code(c);
  }

  /**
   * @register {string -> NodeBson.value}
   */
  function symbol_value(s) {
    return new mongo.Symbol(s);
  }

  /**
   * @register {string, NodeBson.document -> NodeBson.value}
   */
  function code_scope_value(c, s) {
    return new mongo.Code(c, s);
  }

  /**
   * @register { -> NodeBson.value}
   */
  function min_value() {
    return new mongo.MinKey(); ;
  }

  /**
   * @register { -> NodeBson.value}
   */
  function max_value() {
    return new mongo.MaxKey(); ;
  }


  /**
   * @register {NodeBson.value -> Bson.value}
   */
  function to_value(x) {
    var t = typeof(x);
    switch(t){
    case 'string' : return {String : x};
    case 'number' : return {Int64 : x};
    case 'boolean': return {Boolean : x};
    case 'object' :
      if(x === null){
        return {Null : js_void};
      }
      var c = x.constructor;
      if(c === Array){
        return {Array : BslMongo_NodeBson_to_document(x)};
      } else if(c === Object){
        return {Document : BslMongo_NodeBson_to_document(x)};
      } else if(c === mongo.Double){
        return {Double : x.valueOf()};
      } else if(c === mongo.Timestamp) {
        return {Timestamp : {f1 : x.getHighBits(), f2 :x.getLowBits()}};
      } else if(c === mongo.Long){
        return {Int64 : [x.getHighBits(), x.getLowBits()]};
      } else if(c === mongo.Binary){
        return {Binary : binary_of_buffer(x.buffer)};
      } else if(c === mongo.ObjectID){
        return {ObjectID : x.toString()};
      } else if(c === mongo.Code){
        var c = x.code;
        for (var i in c.scope){
          var s = to_value(x.scope);
          return {CodeScope : {f1 : c, f2 : s}};
        }
        return {Code : c};
      } else if(c === mongo.Symbol){
        return {Symbol : x.valueOf()};
      } else if(c === mongo.MaxKey){
        return {Max : js_void};
      } else if(c === mongo.MinKey){
        return {Min : js_void};
      } else if(c === Date){
        return {Date : x.getTime()};
      } else {
        console.error("NodeBson.to_value", x, c);
        throw (new Error("Unknown mongo object"))
      }
      default :
        console.error("NodeBson.to_value", x, t);
        throw (new Error("Unknown typeof mongo object"))
    }
  }

  /**
   * @register {NodeBson.document -> Bson.document}
   */
  function to_document(doc) {
    var a = new Array();
    for (var name in doc){
      a.push({name:name, value: to_value(doc[name])});
    }
    return js2list(a);
  }

/** @endModule */

/** @module NodeMongo */

// Note: the default default is false
function getbool(b, dflt) {
  if (b === null || typeof b == 'undefined')
    return (typeof(dflt) === 'boolean') ? dflt : false;
  else if (typeof(b) === 'boolean')
    return b
  else
    return un_uniformize_bool(b)
}

var databaseTable;
(function () {
  var opabsl = {};
  try {
    opabsl = require('opabsl.opp');
  } catch (e) {
    // If we can't require, we assume "static" linkage
  }
  var f = opabsl.SimpleTable || global.SimpleTable;
  databaseTable = new f();
})();

/**
 * @register {string, int, bool, int -> NodeMongo.server}
 */
function server(host, port, auto_reconnect, poolSize) {
  return new Server(host, port, {auto_reconnect:auto_reconnect, poolSize:poolSize})
}

/**
 * @register {list(NodeMongo.server) -> NodeMongo.server}
 */
function replset(servers) {
  return new ReplSetServers(list2js(servers))
}

/**
 * @register {NodeMongo.server, string, bool -> NodeMongo.db}
 */
function db(server, dbname, slaveok) {
  return new Db(dbname, server, {slaveok:getbool(slaveok,false)})
}

/**
 * @register {NodeMongo.db, continuation(tuple_2(string, NodeMongo.db)) -> void}
 * @cpsBypass
 */
function open(db, cont) {
  db.open(function(err, db) {
    return_(cont, {f1:(err === null || typeof err == 'undefined') ? "" : err.message, f2:db})
  });
  return;
}

/**
 * @register {NodeMongo.server, string, bool, \
              continuation(tuple_2(string, NodeMongo.db)) -> void}
 * @cpsBypass
 */
function get_database(server, name, slaveok, k) {
  var barrier = databaseTable.get(name);
  if(barrier == null){
    var db = new Db(name, server, {slaveok: un_uniformize_bool(slaveok)});
    barrier = new Barrier("mongo_database:"+name);
    databaseTable.put(name, barrier);
    db.open(function(err, db){
      var result;
      if (err == null){
        result = {f1 : "", f2:db};
      } else {
        result = {f1 : err, f2:0};
      }
      barrier.release(result);
    })
  }
  barrier.wait(k);
  return;
}

/**
 * @register {NodeMongo.db, continuation(string) -> void}
 * @cpsBypass
 */
function close(db, cont) {
  db.close(false, function (err, result) {
    return_(cont, (err === null || typeof err == 'undefined') ? "" : err.message);
  });
  return;
}

/**
 * @register {NodeMongo.db, string, continuation(tuple_2(string, NodeMongo.collection)) -> void}
 * @cpsBypass
 */
function collection(db, cname, cont) {
  db.collection(cname,
                function(err, collection) {
                  if (err === null || typeof err == 'undefined') {
                    return_(cont, {f1: "", f2:collection})
                  }else{
                    return_(cont, {f1: err.message, f2:0})
                  }
                });
  return;
}

/**
 * @register {NodeMongo.collection, int, int, NodeBson.document, \
              opa[option(NodeBson.document)], \
              continuation(tuple_2(string,Mongo.reply)) -> void}
 * @cpsBypass
 */
function query(collection, skip, limit, query, fields_opt, cont) {
  var opts = {skip:skip, limit:limit};
  var fields = option2js(fields_opt);
  if (fields != null) opts['fields'] = fields;
  var query = query;
  if (query["$query"] != null && query["$orderby"] != null){
     opts['sort'] = query["$orderby"];
     query = query["$query"];
  }
  collection.find(query, opts,
                  function (err, cursor) {
                    return_(cont, {f1:(err === null || typeof err == 'undefined') ? "" : err.message, f2:cursor})
                  });
  return;
}

/**
 * @register {Mongo.reply, continuation(int) -> void}
 * @cpsBypass
 */
function count(cursor, cont) {
  cursor.count(function (err, count) {
                 return_(cont, ((err !== null && typeof err != 'undefined') ||
                                count === null || typeof count == 'undefined') ? 0 : count);
               });
  return;
}

/**
 * @register {Mongo.reply, continuation(tuple_2(string, NodeBson.document)) -> void}
 * @cpsBypass
 */
function nextObject(cursor, cont) {
  cursor.nextObject(function (err, item) {
    if (err === null && item != null){
      return_(cont, {f1:"", f2:item})
    } else {
      var msg = err == null ? "No item" : err.message == null ? "No item" : err.message;
      cursor.close();
      return_(cont, {f1:msg == null ? "No item" : msg, f2:0})
    }
  });
  return;
}

/**
 * @register {Mongo.reply -> void}
 */
function cclose(c) {
  c.close();
  return;
}

/**
 * @register {NodeMongo.collection, list(NodeBson.document), bool, \
              bool, continuation(tuple_2(string,list(NodeBson.document))) \
              -> void}
 * @cpsBypass
 */
function insert(collection, docs, keepGoing, safe, cont) {
  var opts = {keepGoing:getbool(keepGoing),
              safe:getbool(safe)}; // TODO: w, wtimeout
  collection.insert(list2js(docs), opts,
                    function (err, insertedDocs) {
                      // The _id field can be a hideous ObjectID object, Opa just uses the string id
                      // which is buried in the object, string representation: _id.__id, binary: _id.id
                      insertedDocs.map(function (o) { if (o._id._bsontype === 'ObjectID') o._id = o._id.__id; });
                      return_(cont, {f1:(err === null || typeof err == 'undefined') ? "" : err.message,
                                     f2:js2list(insertedDocs)});
                    });
  return;
}

/**
 * @register {NodeMongo.collection, NodeBson.document, \
              NodeBson.document, bool, bool, bool, \
              continuation(tuple_2(string,int)) -> void}
 * @cpsBypass
 */
function update(collection, selector, update, upsert, multi, safe, cont) {
  var opts = {upsert:un_uniformize_bool(upsert),
              multi:un_uniformize_bool(multi),
              safe:un_uniformize_bool(safe)};
  collection.update(selector, update, opts,
                    function (err, numberOfUpdatedDocs) {
                      // numberOfUpdatedDocs will be undefined if safe is false
                      return_(cont, {f1:(err === null || typeof err == 'undefined') ? "" :
                        err.message, f2:numberOfUpdatedDocs ? numberOfUpdatedDocs : 0});
                    });
  return;
}

/**
 * @register {NodeMongo.collection, NodeBson.document, bool, continuation(tuple_2(string,int)) -> void}
 * @cpsBypass
 */
function remove(collection, selector, safe, cont) {
  var opts = {safe:getbool(safe)};
  collection.remove(selector, opts,
                    function (err, numberOfRemovedDocs) {
                      // numberOfRemovedDocs will be undefined if safe is false
                      return_(cont, {f1:(err === null || typeof err == 'undefined') ? "" : err.message,
                                     f2:numberOfRemovedDocs ? numberOfRemovedDocs : 0})
                    });
  return;
}

/**
 * @register {NodeMongo.collection, NodeBson.document, bool, bool, bool, \
              bool, bool, continuation(tuple_2(string,string)) -> void}
 * @cpsBypass
 */
function createIndex(collection, fieldOrSpec, unique, sparse, background, dropDups, safe, cont) {
  var opts = {unique:getbool(unique),
              sparse:getbool(sparse),
              background:getbool(background),
              dropDups:getbool(dropDups),
              safe:getbool(safe)};
  collection.createIndex(fieldOrSpec, opts,
                    function (err, indexName) {
                      return_(cont, {f1:(err === null || typeof err == 'undefined') ? "" : err.message,
                                     f2:indexName ? indexName : ""});
                    });
  return;
}

// Not needed by db.opa but here for test code
/**
 * @register {NodeMongo.collection, string, continuation(tuple_2(string,NodeBson.document)) -> void}
 * @cpsBypass
 */
function dropIndex(collection, name, cont) {
  collection.dropIndex(name,
                       function (err, result) {
                         return_(cont, {f1:(err === null || typeof err == 'undefined') ? "" :
                                        err.message, f2:result});
                       });
  return;
}

/**
 * @register {NodeMongo.db, string, string,  continuation(tuple_2(string,bool)) -> void}
 * @cpsBypass
 */
function authenticate(db, name, password, cont) {
  db.authenticate(name,password,
        function (err, res) {
          var auth = err === null || typeof err == 'undefined';
          return_(cont, {f1:auth ? "" : err.message, f2: auth});
        }
  );
  return;
}

/** @endModule */
