- At the beginning I made the choice to name the variables for the define rules, while in teerex
  De Bruijn indexes are used, I thought names would be more convenient.
  They aren't.
  Indexes would allow subpatterns (like in teerex), feature which I actually partially support
  (see README) with a gross hack (which keeps the general consistency though)

- The syntax is... ugly. Really, it's been built over the time. Some of the bases are ugly, so
  is the whole structure, it should be cleaned.

- The syntax errors are almost not handled, that should be improved.

- Bugs:

Handling parenthesis:

-        let filename = {{ String.sub quoted_file 1 (String.length quoted_file -2) }}
+        let filename = {{ String.sub quoted_file 1 ((String.length quoted_file)-2) }}

Missing syntax from ocaml_parser.trx:

-      let new_req = {{ { req with request_body = (mime_list, acc) :: req.request_body } }}
+      let new_req = [[ { req with request_body = (mime_list, acc) :: req.request_body } ]]

Namespace problems (some prefixes, eg. send, read being removed from ids):

-  send_res(res, extern, headers)
+  my_send_res(res, extern, headers)

-include not working:

--include "/libnet/http_rr.proto"
+%-include "/libnet/http_messages.proto"
+
+%%%%%%%%%%%%%%%%%%%%%%%
+%%% General headers %%%

Syntax of unknown functions (eg. <|):

-    {{ output_string file <| sprintf  "%d requests sent.\n" init }}
+    [[ output_string file <| sprintf  "%d requests sent.\n" init ]]

Kludge for list cons:

OK: {{ (1::[]) }} {{ (1::(2::(3::[]))) }} {{ (hd::tl) }} {{ [1;2;3] }}
NOT OK: {{ (1::(2::lst)) }}

