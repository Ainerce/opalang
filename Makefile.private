#!/usr/bin/env make

.PHONY: default
default: flat

include Makefile

ifneq ($(HAS_CAMLIDL)$(HAS_LIBNATPMP)$(HAS_MINIUPNPC),111)
DISABLED_LIBS = libnattraversal
endif

.PHONY: flat
flat: $(MYOCAMLBUILD)
	$(OCAMLBUILD) $(call target-tools,$(ALL_TOOLS)) opa-packages.stamp
	@$(call copy-tools,$(ALL_TOOLS))
	$(MAKE) manpages
	$(MAKE) opa_tools

.PHONY: all
all: $(MYOCAMLBUILD)
	$(OCAMLBUILD) $(call target-tools,$(ALL_TOOLS)) opa-both-packages.stamp
	@$(call copy-tools,$(ALL_TOOLS))
	$(MAKE) manpages
	$(MAKE) opa_tools

.PHONY: build
build: all

.PHONY: opa-flat-packages opa-both-packages
opa-flat-packages: $(MYOCAMLBUILD)
	$(OCAMLBUILD) opa-packages.stamp
opa-both-packages: $(MYOCAMLBUILD)
	$(OCAMLBUILD) opa-both-packages.stamp

.PHONY: stdlib stdlib-flat
stdlib: opa-both-packages
stdlib-flat: opa-flat-packages

.PHONY: distrib-all
distrib-all: $(MYOCAMLBUILD)
	$(OCAMLBUILD) $(call target-tools,$(DISTRIB_TOOLS)) opa-both-packages.stamp
	@$(call copy-tools,$(DISTRIB_TOOLS))
	$(MAKE) manpages
	$(MAKE) opa_tools

FLAT_STDLIB_SUFFIX_DIR=stdlib.qmlflat
STDLIB_FLAT_DIR=$(STDLIB_DIR)/$(FLAT_STDLIB_SUFFIX_DIR)
BUILD_FLAT_DIR=$(BUILD_DIR)/$(FLAT_STDLIB_SUFFIX_DIR)
define install-package
@printf "Installing into $(STDLIB_FLAT_DIR)/$*.opx[K\r"
@mkdir -p "$(STDLIB_FLAT_DIR)/$*.opx/_build"
@find "$(BUILD_FLAT_DIR)/$*.opx" -maxdepth 1 ! -type d -exec $(INSTALL) {} "$(STDLIB_FLAT_DIR)/$*.opx/" \;
@$(INSTALL) $(BUILD_FLAT_DIR)/$*.opx/_build/*.a "$(STDLIB_FLAT_DIR)/$*.opx/_build/"
@$(INSTALL) $(BUILD_FLAT_DIR)/$*.opx/_build/*.cmi "$(STDLIB_FLAT_DIR)/$*.opx/_build/"
@$(INSTALL) $(BUILD_FLAT_DIR)/$*.opx/_build/*.cmxa "$(STDLIB_FLAT_DIR)/$*.opx/_build/"
endef

PLUGINS_DIR=lib/plugins
define install-flat-plugin
@printf "Installing into $(STDLIB_DIR)/$*.opp^[[K\r"
@mkdir -p "$(STDLIB_DIR)/$*.opp"
@$(if $(wildcard $(BUILD_DIR)/$(PLUGINS_DIR)/$*.opp/*MLRuntime.*), $(INSTALL) $(BUILD_DIR)/$(PLUGINS_DIR)/$*.opp/*MLRuntime.* "$(STDLIB_DIR)/$*.opp/")
endef

install-packageopt-%:
	$(if $(wildcard $(BUILD_FLAT_DIR)/$*.opx/_build/*),$(install-package))

install-package-%:
	$(install-package)

install-packages: $(addprefix install-packageopt-,$(OPA_PACKAGES))
	@printf "Installation to $(STDLIB_FLAT_DIR) done.[K\n"

install-all-packages: $(addprefix install-package-,$(OPA_PACKAGES))
	@printf "Installation to $(STDLIB_FLAT_DIR) done.[K\n"

install-plugin-%:
	$(install-plugin)
	$(install-flat-plugin)

install-all-plugins: $(addprefix install-plugin-,$(OPA_PLUGINS))
	@printf "Installation to $(STDLIB_DIR) done.[K\n"

install:: install-packages
	@printf "Installation into $(INSTALL_DIR) done.[K\n"

# Install an opa wrapper with different stdlib and options (for some backwards-compatibility)
install-qmlflat: # depends on opabsl_for_compiler, but we don't want to run ocamlbuild twice
	@mkdir -p $(INSTALL_DIR)/bin $(INSTALL_DIR)/share/opa/mlstatebsl
	@$(INSTALL) $(BUILD_DIR)/$(PLUGINS_DIR)/opabsl.opp/lib/plugins/opabsl/mlstatebsl/opabsl_*.opa $(INSTALL_DIR)/share/opa/mlstatebsl
	@echo "#!/usr/bin/env bash" > $(INSTALL_DIR)/bin/qmlflat
	@echo "set -e" >> $(INSTALL_DIR)/bin/qmlflat
	@echo "set -u" >> $(INSTALL_DIR)/bin/qmlflat
	@chmod 755 $(INSTALL_DIR)/bin/qmlflat
	@echo 'exec opa --parser classic --no-stdlib --no-server --no-cps --no-closure --no-ei --no-constant-sharing --no-undot --separated off --value-restriction disabled --no-warn duplicateL0  --no-warn typer.warncoerce --no-warn unused --no-discard-of-unused-stdlib --no-warn pattern $(STDLIB_DIR)/opabsl.opp $$(if ! grep -qE "(^| )--no-stdlib( |$$)" <<<"$$*"; then echo $(INSTALL_DIR)/share/opa/mlstatebsl/*.opa; fi) "$$@"' \
	>> $(INSTALL_DIR)/bin/qmlflat

# installs some dev tools on top of the normal install; these should not change often
install-all: install install-bld install-qmlflat tools/maxmem
	@$(INSTALL) tools/platform_helper.sh $(INSTALL_DIR)/bin/
	@$(INSTALL) tools/maxmem $(INSTALL_DIR)/bin/
	@rm tools/maxmem
	@$(INSTALL) tools/plotmem $(INSTALL_DIR)/bin/
