/*
    Copyright Â© 2011 MLstate

    This file is part of OPA.

    OPA is free software: you can redistribute it and/or modify it under the
    terms of the GNU Affero General Public License, version 3, as published by
    the Free Software Foundation.

    OPA is distributed in the hope that it will be useful, but WITHOUT ANY
    WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
    FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for
    more details.

    You should have received a copy of the GNU Affero General Public License
    along with OPA.  If not, see <http://www.gnu.org/licenses/>.
*/
var Crypto = require('crypto');

/**
 * Compute the MD5 signature of a string.
 *
 * @param {!string} str A text of arbitrary length.
 * @return {!string} A 32 digits long hexadecimal string
 */
##register md5 : string -> string
##args(data)
{
    var hash = Crypto.createHash('md5');
    hash.update(data);
    return hash.digest('hex');
}


/**
 * Encode a string as Base 64
 *
 * @param {!string} str A text of arbitrary length.
 * @return {!string} A (longer) representation, encoded as base 64
 */
##register base64_encode : string -> string
##args(data)
{
    // Warning: As of version 0.6.9, the node.js docs say that
    // using the 'binary' encoding is deprecated and will
    // be removed in future versions of node.x

    return new Buffer(data, 'binary').toString('base64');
}

/**
 * @param {!string} str A base64-encoded text
 * @return {!string} A decoded representation
 */
##register base64_decode : string -> string
##args(data)
{
    return new Buffer(data, 'base64');
}

/**
 * Compute the SHA1 signature of a string
 *
 * @param {!string} salt
 * @param {!string} str The message to be hashed.
 * @return {!string} The resulting signature
 */
##register hmac_sha1 : string, string -> string
##args(salt, str)
{
  // See the 'binary' warning in base64_encode()
  return Crypto.createHmac('sha1', salt).update(str).digest('binary');
}

// TODO: implement these functions.

##register base64_encode_compact : string -> string
##args(str)
{
  error('base64_encore_compact is not implemented');
}

##register base64_encode_multiline : string -> string
##args(str)
{
  error('base64_encode_multiline is not implemented');
}

##register base64_decode2 : string -> string
##args(str)
{
  error('base64_decode2 is not implemented');
}

##register hmac_sha256 : string, string -> string
##args(salt, str)
{
  error('hmac_sha256 is not implemented');
}

##register sha2 : string -> string
##args(str)
{
  error('sha2 is not implemented');
}
