var mongo = require('mongodb')
var Admin = mongo.Admin;
var BSON = mongo.BSONPure;
var CheckMaster = mongo.CheckMaster;
var Connection = mongo.Connection;
var Cursor = mongo.Cursor;
var Db = mongo.Db;
var DbCommand = mongo.DbCommand;
var GridStore = mongo.GridStore;
var ReplSetServers = mongo.ReplSetServers;
var Server = mongo.Server;
var connect = mongo.connect;

##extern-type NodeMongo.server
##extern-type NodeMongo.db
##extern-type NodeMongo.collection
##extern-type NodeBson.document
##extern-type NodeBson.value
##extern-type Mongo.reply
##extern-type int32
##extern-type int64
##opa-type tuple_2('a, 'b)
##extern-type continuation('a)
##opa-type list('a)
##opa-type Bson.document

##module NodeBson

  ##register empty_document : -> NodeBson.document
  ##args()
  {
    return {};
  }

  ##register add_element: NodeBson.document, string, NodeBson.value -> void
  ##args(doc, name, elt)
  {
    doc[name] = elt;
    return js_void;
  }

  ##register float_value: float -> NodeBson.value
  ##args(f)
  {
    return new mongo.Double(f);
  }

  ##register int_value: int -> NodeBson.value
  ##args(i)
  {
    return mongo.Long(i);
  }

  ##register string_value: string -> NodeBson.value
  ##args(s)
  {
    return s;
  }

  ##register bool_value: bool -> NodeBson.value
  ##args(n)
  {
    return un_uniformize_bool(b);
  }

  ##register int32_value: int32 -> NodeBson.value
  ##args(i)
  {
    return i;
  }

  ##register timestamp_value: int, int -> NodeBson.value
  ##args(l, h)
  {
    return mongo.Timestamp(l, h);
  }

  ##register int64_value: int64 -> NodeBson.value
  ##args(i)
  {
    return mongo.Long(i[0], i[1]);
  }

  ##register document_value: NodeBson.document -> NodeBson.value
  ##args(d)
  {
    return d;
  }

  // TODO - binary
  ##register binary_value: string -> NodeBson.value
  ##args(b)
  {
    return new mongo.Binary(b);
  }

  ##register object_id_value: string -> NodeBson.value
  ##args(s)
  {
    return new mongo.ObjectID(s);
  }

  ##register date_value: int -> NodeBson.value
  ##args(d)
  {
    return new Date(d);
  }

  ##register null_value: -> NodeBson.value
  ##args()
  {
    return null;
  }

  ##register regexp_value: string, string -> NodeBson.value
  ##args(p, f)
  {
    return new RegExp(p, f);
  }

  ##register code_value: string -> NodeBson.value
  ##args(c)
  {
    return new mongo.Code(c);
  }

  ##register symbol_value: string -> NodeBson.value
  ##args(s)
  {
    return new mongo.Symbol(s);
  }

  ##register code_scope_value: string, NodeBson.document -> NodeBson.value
  ##args(c, s)
  {
    return new mongo.Code(c, s);
  }

  ##register min_value:  -> NodeBson.value
  ##args()
  {
    return new mongo.MinKey(); ;
  }

  ##register max_value:  -> NodeBson.value
  ##args()
  {
    return new mongo.MaxKey(); ;
  }

##endmodule

##module NodeMongo

// Note: the default default is false
function getbool(b, dflt) {
  if (b === null || b === undefined)
    return (typeof(dflt) === 'boolean') ? dflt : false;
  else if (typeof(b) === 'boolean')
    return b
  else
    return un_uniformize_bool(b)
}

var databaseTable = new SimpleTable();

exports.server = BslMongo_NodeMongo_server
##register server : string, int, bool, int -> NodeMongo.server
##args(host, port, auto_reconnect, poolSize)
{
  return new Server(host, port, {auto_reconnect:auto_reconnect, poolSize:poolSize})
}

exports.replset = BslMongo_NodeMongo_replset
##register replset : list(NodeMongo.server) -> NodeMongo.server
##args(servers)
{
  return new ReplSetServers(list2js(servers))
}

exports.db = BslMongo_NodeMongo_db
##register db : NodeMongo.server, string, bool -> NodeMongo.db
##args(server, dbname, slaveok)
{
  return new Db(dbname, server, {slaveok:getbool(slaveok,false)})
}

exports.open = BslMongo_NodeMongo_open
##register open : NodeMongo.db, continuation(tuple_2(string, NodeMongo.db)) -> void
##args(db, cont)
{
  db.open(function(err, db) { cont.execute1({f1:(err === null || err === undefined) ? "" : err.message, f2:db}) })
  return js_void
}

##register [cps-bypass] get_database : NodeMongo.server, string, bool,\
 continuation(tuple_2(string, NodeMongo.db)) -> void
##args(server, name, slaveok, k)
{
  var barrier = databaseTable.get(name);
  if(barrier == null){
    var db = new Db(name, server, {slaveok: un_uniformize_bool(slaveok)});
    barrier = new Barrier("mongo_database:"+name);
    databaseTable.put(name, barrier);
    db.open(function(err, db){
      var result;
      if (err == null){
        result = {f1 : "", f2:db};
      } else {
        result = {f1 : err, f2:0};
      }
      barrier.release(result);
    })
  }
  barrier.wait(k);
  return js_void;
}

exports.close = BslMongo_NodeMongo_close
##register close : NodeMongo.db, continuation(string) -> void
##args(db, cont)
{
  db.close(false, function (err, result) { cont.execute1((err === null || err === undefined) ? "" : err.message) });
  return js_void
}

exports.collection = BslMongo_NodeMongo_collection
##register collection : NodeMongo.db, string, continuation(tuple_2(string, NodeMongo.collection)) -> void
##args(db, cname, cont)
{
  db.collection(cname,
                function(err, collection) {
                  if (err === null || err === undefined) {
                    cont.execute1({f1: "", f2:collection})
                  }else{
                    cont.execute1({f1: err.message, f2:0})
                  }
                });
  return js_void;
}

exports.query = BslMongo_NodeMongo_query
##register query : NodeMongo.collection, int, int, Bson.document, option(Bson.document), \
                   continuation(tuple_2(string,Mongo.reply)) -> void
##args(collection, skip, limit, query, fields_opt, cont)
{
  var opts = {skip:skip, limit:limit};
  if (Option.is_some(fields_opt)) opts['fields'] = Option.get(fields_opt);
  collection.find(query, opts,
                  function (err, cursor) {
                    cont.execute1({f1:(err === null || err === undefined) ? "" : err.message, f2:cursor})
                  });
  return js_void
}

exports.count = BslMongo_NodeMongo_count
##register count : Mongo.reply, continuation(int) -> void
##args(cursor, cont)
{
  cursor.count(function (err, count) {
                 cont.execute1(((err !== null && err !== undefined) || count === null || count === undefined) ? 0 : count)
               });
  return js_void
}

exports.nextObject = BslMongo_NodeMongo_nextObject
##register nextObject : Mongo.reply, continuation(tuple_2(string, Bson.document)) -> void
##args(cursor, cont)
{
  cursor.nextObject(function (err, item) { cont.execute1({f1:(err === null || err === undefined) ? "" : err.message, f2:item}) });
  return js_void
}

exports.insert = BslMongo_NodeMongo_insert
##register insert : NodeMongo.collection, list(Bson.document), bool, bool, \
                    continuation(tuple_2(string,list(Bson.document))) -> void
##args(collection, docs, keepGoing, safe, cont)
{
  var opts = {keepGoing:getbool(keepGoing),
              safe:getbool(safe)}; // TODO: w, wtimeout
  collection.insert(list2js(docs), opts,
                    function (err, insertedDocs) {
                      // The _id field can be a hideous ObjectID object, Opa just uses the string id
                      // which is buried in the object, string representation: _id.__id, binary: _id.id
                      insertedDocs.map(function (o) { if (o._id._bsontype === 'ObjectID') o._id = o._id.__id; });
                      cont.execute1({f1:(err === null || err === undefined) ? "" : err.message,
                            f2:js2list(insertedDocs)})
                    });
  return js_void
}

exports.update = BslMongo_NodeMongo_update
##register update : NodeMongo.collection, Bson.document, Bson.document, bool, bool, bool,  \
                   continuation(tuple_2(string,int)) -> void
##args(collection, selector, update, upsert, multi, safe, cont)
{
  var opts = {upsert:un_uniformize_bool(upsert),
              multi:un_uniformize_bool(multi),
              safe:un_uniformize_bool(safe)};
  collection.update(selector, update, opts,
                    function (err, numberOfUpdatedDocs) {
                      // numberOfUpdatedDocs will be undefined if safe is false
                      cont.execute1({f1:(err === null || err === undefined) ? "" : err.message, f2:numberOfUpdatedDocs ? numberOfUpdatedDocs : 0})
                    });
  return js_void
}

exports.remove = BslMongo_NodeMongo_remove
##register remove : NodeMongo.collection, Bson.document, bool, continuation(tuple_2(string,int)) -> void
##args(collection, selector, safe, cont)
{
  var opts = {safe:getbool(safe)};
  collection.remove(selector, opts,
                    function (err, numberOfRemovedDocs) {
                      // numberOfRemovedDocs will be undefined if safe is false
                      cont.execute1({f1:(err === null || err === undefined) ? "" : err.message,
                                     f2:numberOfRemovedDocs ? numberOfRemovedDocs : 0})
                    });
  return js_void
}

exports.createIndex = BslMongo_NodeMongo_createIndex
##register createIndex : NodeMongo.collection, Bson.document, bool, bool, bool, bool, bool, \
                         continuation(tuple_2(string,string)) -> void
##args(collection, fieldOrSpec, unique, sparse, background, dropDups, safe, cont)
{
  var opts = {unique:getbool(unique),
              sparse:getbool(sparse),
              background:getbool(background),
              dropDups:getbool(dropDups),
              safe:getbool(safe)};
  collection.createIndex(fieldOrSpec, opts,
                    function (err, indexName) {
                      cont.execute1({f1:(err === null || err === undefined) ? "" : err.message, f2:indexName})
                    });
  return js_void
}

// Not needed by db.opa but here for test code
exports.dropIndex = BslMongo_NodeMongo_dropIndex
##register dropIndex : NodeMongo.collection, string, continuation(tuple_2(string,Bson.document)) -> void
##args(collection, name, cont)
{
  collection.dropIndex(name,
                       function (err, result) {
                         cont.execute1({f1:(err === null || err === undefined) ? "" : err.message, f2:result});
                       });
  return js_void;
}

##endmodule
