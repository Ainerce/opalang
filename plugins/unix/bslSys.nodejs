var child_process = require('child_process');

##opa-type list('a)

##register get_argv: -> opa[list(string)]
##args()
{
    return js2list(process.argv);
}


##register self_name : -> string
##args()
{
    return process.argv[0];
}

##register exit : int -> 'a
##args(code)
{
    process.exit(code);
}

##module process

##register [cps-bypass] exec_cps : string, string, continuation(string) -> void
##args(command, input, cont)
{
    var proc = child_process.exec(command,
      function (error, stdout, stderr) {
        // We ignore the standard error
        if (error == null) {
          return_(cont, stdout);
        } else {
          return_(cont, error.toString())
        }
      }
    );

    proc.stdin.write(input);
    proc.stdin.end();

    return js_void;
}

// Stub for the typechecker
##register exec : string, string -> string
##args(command, input)
{
   assert(false);
}

##endmodule

// Stubs for stdlib.system to compile
// TODO: implement this
##opa-type ip
##register gethostname : -> string
##args()
{
    error("gethostname() is not implemented");
}
##register gethostbyname : string -> option(opa[ip])
##args(a)
{
    error("gethostbyname() is not implemented");
}
##register gethostsbyname : string -> opa[list(ip)]
##args(a)
{
    error("gethostsbyname() is not implemented");
}
##register get_memory_usage : -> int
##args()
{
    return process.memoryUsage().rss;
}

##register get_env_var: string -> option(string)
##args(key)
{
  var r = process.env[key];
  return r == undefined ? js_none : js_some(r);
}
